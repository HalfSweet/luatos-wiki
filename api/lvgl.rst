lvgl - LVGL图像库
=================

lvgl.font_get(name)
-------------------

获取内置字体

**参数**

========== ===========================================
传入值类型 解释
========== ===========================================
string     字体名称+字号, 例如 opposans_m_10 simsun_48
========== ===========================================

**返回值**

========== ========
返回值类型 解释
========== ========
userdata   字体指针
========== ========

**例子**

.. code:: lua


   local font = lvgl.font_get("simsun_48")

--------------

lvgl.font_load(path)
--------------------

从文件系统加载字体

**参数**

========== ========
传入值类型 解释
========== ========
string     字体路径
========== ========

**返回值**

========== ========
返回值类型 解释
========== ========
userdata   字体指针
========== ========

**例子**

.. code:: lua

   local font = lvgl.font_load("/font_simsun_32.bin")

--------------

lvgl.font_free(font)
--------------------

释放字体,慎用!!!仅通过font_load加载的字体允许卸载,通过font_get获取的字体不允许卸载

**参数**

========== ========
传入值类型 解释
========== ========
string     字体路径
========== ========

**返回值**

========== ========
返回值类型 解释
========== ========
userdata   字体指针
========== ========

**例子**

.. code:: lua

   local font = lvgl.font_load("/font_simsun_32.bin")
   -- N N N N 操作
   -- 确定字体不被使用,不被引用,且内存紧张需要释放
   lvgl.font_free(font)

--------------

lvgl.obj_set_event_cb(obj, func)
--------------------------------

设置组件的事件回调

**参数**

+------------+--------------------------------------------------------+
| 传入值类型 | 解释                                                   |
+============+========================================================+
| userdata   | lvgl组件指针                                           |
+------------+--------------------------------------------------------+
| func       | lua函数, 参数有2个 (obj, event), 其中obj是当前对象,    |
|            | event是事件类型, 为整型                                |
+------------+--------------------------------------------------------+

**返回值**

========== ========
返回值类型 解释
========== ========
nil        无返回值
========== ========

**例子**

无

--------------

lvgl.obj_set_signal_cb(obj, func)
---------------------------------

设置组件的信号回调

**参数**

+------------+--------------------------------------------------------+
| 传入值类型 | 解释                                                   |
+============+========================================================+
| userdata   | lvgl组件指针                                           |
+------------+--------------------------------------------------------+
| func       | lua函数, 参数有2个 (obj, signal), 其中obj是当前对象,   |
|            | signal是信号类型, 为整型                               |
+------------+--------------------------------------------------------+

**返回值**

========== ========
返回值类型 解释
========== ========
nil        无返回值
========== ========

**例子**

无

--------------

lvgl.anim_set_exec_cb(anim, func)
---------------------------------

设置动画回调

**参数**

+------------+--------------------------------------------------------+
| 传入值类型 | 解释                                                   |
+============+========================================================+
| userdata   | 动画指针                                               |
+------------+--------------------------------------------------------+
| userdata   | lvgl组件指针                                           |
+------------+--------------------------------------------------------+
| func       | lua函数, 参数有2个 (obj, value), 其中obj是当前对象,    |
|            | signal是信号类型, 为整型                               |
+------------+--------------------------------------------------------+

**返回值**

========== ========
返回值类型 解释
========== ========
nil        无返回值
========== ========

**例子**

无

--------------

lvgl.anim_set_ready_cb(anim, func)
----------------------------------

设置动画回调

**参数**

========== =============================================
传入值类型 解释
========== =============================================
userdata   动画指针
userdata   lvgl组件指针
func       lua函数, 参数有1个 (anim), 其中anim是当前对象
========== =============================================

**返回值**

========== ========
返回值类型 解释
========== ========
nil        无返回值
========== ========

**例子**

无

--------------

lvgl.scr_act()
--------------

获取当前活跃的screen对象

**参数**

========== ==========
传入值类型 解释
========== ==========
return     screen指针
========== ==========

**返回值**

无

**例子**

.. code:: lua

   local scr = lvgl.scr_act()

--------------

lvgl.layout_top()
-----------------

获取layout_top

**参数**

========== ==========
传入值类型 解释
========== ==========
return     layout指针
========== ==========

**返回值**

无

**例子**

无

--------------

lvgl.layout_sys()
-----------------

获取layout_sys

**参数**

========== ==========
传入值类型 解释
========== ==========
return     layout指针
========== ==========

**返回值**

无

**例子**

无

--------------

lvgl.scr_load(scr)
------------------

载入指定的screen

**参数**

========== ==========
传入值类型 解释
========== ==========
userdata   screen指针
========== ==========

**返回值**

无

**例子**

.. code:: lua

   lvgl.disp_set_bg_color(nil, 0xFFFFFF)
   local scr = lvgl.obj_create(nil, nil)
   local btn = lvgl.btn_create(scr)
   lvgl.obj_align(btn, lvgl.scr_act(), lvgl.ALIGN_CENTER, 0, 0)
   lvgl.label_set_text(label, "LuatOS!")
   lvgl.scr_load(scr)

--------------

lvgl.calendar_date_t()
----------------------

创建一个calendar_date_t

**参数**

无

**返回值**

========== ===============
返回值类型 解释
========== ===============
userdata   calendar_date_t
========== ===============

**例子**

.. code:: lua

   local calendar_date_t = lvgl.calendar_date_t()

--------------

lvgl.anim_create()
------------------

创建一个anim

**参数**

无

**返回值**

========== ========
返回值类型 解释
========== ========
userdata   anim指针
========== ========

**例子**

.. code:: lua

   local anim = lvgl.anim_create()

--------------

lvgl.anim_free(anim)
--------------------

释放一个anim

**参数**

无

**返回值**

========== ========
返回值类型 解释
========== ========
userdata   anim指针
========== ========

**例子**

.. code:: lua

   local lvgl.anim_free(anim)

--------------

lvgl.anim_set_path_str(anim, tp)
--------------------------------

设置动画路径方式

**参数**

+------------+--------------------------------------------------------+
| 传入值类型 | 解释                                                   |
+============+========================================================+
| userdata   | 动画指针                                               |
+------------+--------------------------------------------------------+
| string     | 类型, 支持                                             |
|            | lin                                                    |
|            | ear/ease_in/ease_out/ease_in_out/overshoot/bounce/step |
+------------+--------------------------------------------------------+

**返回值**

========== ========
返回值类型 解释
========== ========
nil        无返回值
========== ========

**例子**

无

--------------

lvgl.qrcode_create(parent, size, dark_color, light_color)
---------------------------------------------------------

创建qrcode组件

**参数**

========== ============================================
传入值类型 解释
========== ============================================
userdata   父组件
int        长度,因为qrcode是正方形
int        二维码中数据点的颜色, RGB颜色, 默认 0x3333ff
int        二维码中背景点的颜色, RGB颜色, 默认 0xeeeeff
========== ============================================

**返回值**

========== ==========
返回值类型 解释
========== ==========
userdata   qrcode组件
========== ==========

**例子**

.. code:: lua

   -- 创建并显示qrcode
   local qrcode = lvgl.qrcode_create(scr, 100)
   lvgl.qrcode_update(qrcode, "https://luatos.com")
   lvgl.obj_align(qrcode, lvgl.scr_act(), lvgl.ALIGN_CENTER, -100, -100)

--------------

lvgl.qrcode_update(qrcode, cnt)
-------------------------------

设置qrcode组件的二维码内容,配合qrcode_create使用

**参数**

========== ==============================
传入值类型 解释
========== ==============================
userdata   qrcode组件,由qrcode_create创建
string     二维码的内容数据
========== ==============================

**返回值**

+------------+--------------------------------------------------------+
| 返回值类型 | 解释                                                   |
+============+========================================================+
| bool       | 更新成功返回true,否则返回false.                        |
|            | 通常只有数据太长无法容纳才会返回false                  |
+------------+--------------------------------------------------------+

**例子**

无

--------------

lvgl.qrcode_delete(qrcode)
--------------------------

删除qrcode组件

**参数**

========== ==============================
传入值类型 解释
========== ==============================
userdata   qrcode组件,由qrcode_create创建
========== ==============================

**返回值**

========== ========
返回值类型 解释
========== ========
nil        无返回值
========== ========

**例子**

无

--------------

lvgl.style_t()
--------------

创建一个style

**参数**

无

**返回值**

========== =========
返回值类型 解释
========== =========
userdata   style指针
========== =========

**例子**

.. code:: lua

   local style = lvgl.style_t()
   lvgl.style_init(style)

--------------

lvgl.style_create()
-------------------

创建一个style并初始化

**参数**

无

**返回值**

========== =========
返回值类型 解释
========== =========
userdata   style指针
========== =========

**例子**

.. code:: lua

   local style = lvgl.style_create()

--------------

lvgl.style_list_create()
------------------------

创建一个style_list

**参数**

无

**返回值**

========== =========
返回值类型 解释
========== =========
userdata   style指针
========== =========

**例子**

.. code:: lua

   local style = lvgl.style_create()

--------------

lvgl.style_list_t()
-------------------

创建一个style_list

**参数**

无

**返回值**

========== =========
返回值类型 解释
========== =========
userdata   style指针
========== =========

**例子**

.. code:: lua

   local style = lvgl.style_list_t()

--------------

lvgl.style_delete(style)
------------------------

删除style,慎用,通常不会执行删除操作

**参数**

========== =========
传入值类型 解释
========== =========
userdata   style指针
========== =========

**返回值**

无

**例子**

.. code:: lua

   local style = lvgl.style_create()
   -- ...
   -- ...
   -- lvgl.style_delete(style)

--------------

.. _lvgl.style_deletestyle-1:

lvgl.style_delete(style)
------------------------

删除style_list,慎用,通常不会执行删除操作

**参数**

========== =========
传入值类型 解释
========== =========
userdata   style指针
========== =========

**返回值**

无

**例子**

.. code:: lua

   local style_list = lvgl.style_list_create()
   -- ...
   -- ...
   -- lvgl.style_list_delete(style_list)

--------------

lvgl.gif_create(parent, path)
-----------------------------

创建gif组件

**参数**

========== ================================
传入值类型 解释
========== ================================
userdata   父组件,可以是nil,但通常不会是nil
string     文件路径
========== ================================

**返回值**

========== =================================
返回值类型 解释
========== =================================
userdata   组件指针,若失败会返回nil,建议检查
========== =================================

**例子**

.. code:: lua

   local gif = lvgl.gif_create(scr, "S/emtry.gif")
   if gif then
       log.info("gif", "create ok")
   end

--------------

lvgl.gif_restart(gif)
---------------------

重新播放gif组件

**参数**

========== =================================
传入值类型 解释
========== =================================
userdata   gif组件支持, 由gif_create方法返回
========== =================================

**返回值**

========== ========
返回值类型 解释
========== ========
nil        无返回值
========== ========

**例子**

.. code:: lua

   local gif = lvgl.gif_create(scr, "S/emtry.gif")
   if gif then
       log.info("gif", "create ok")
   end

--------------
